// datasource db defines the database connection settings.
// It is configured for PostgreSQL and uses an environment variable for the connection URL.
// The 'extensions' feature enables the use of PostgreSQL-specific data types.
datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
}

// generator db configures Prisma Client settings.
// It is set up to use Prisma Client Python with asyncio interface and specific features.
generator db {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5
  previewFeatures      = ["postgresqlExtensions"]
}

model User {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  email     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Questions Question[]
  Answers   Answer[]
}

model Question {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  UserId  String?
  User    User?    @relation(fields: [UserId], references: [id])
  Answers Answer[]
}

model Answer {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  QuestionId String?
  Question   Question? @relation(fields: [QuestionId], references: [id])
  UserId     String?
  User       User?     @relation(fields: [UserId], references: [id])
}

model Module {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  name        String   @unique
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Integrations     Integration[]
  SecurityReviews  SecurityReview[]
  SkillSets        SkillSet[]
  Documents        Document[]
  PerformanceTests PerformanceTest[]
  ScalabilityTests ScalabilityTest[]
}

model Integration {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  moduleId    String
  Module      Module   @relation(fields: [moduleId], references: [id])
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SecurityReview {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  moduleId    String
  Module      Module   @relation(fields: [moduleId], references: [id])
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SkillSet {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  moduleId    String
  Module      Module   @relation(fields: [moduleId], references: [id])
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Document {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  moduleId  String
  Module    Module   @relation(fields: [moduleId], references: [id])
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PerformanceTest {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  moduleId    String
  Module      Module   @relation(fields: [moduleId], references: [id])
  description String
  result      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ScalabilityTest {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  moduleId    String
  Module      Module   @relation(fields: [moduleId], references: [id])
  description String
  result      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Role {
  ADMIN
  USER
  MANAAGER
}

